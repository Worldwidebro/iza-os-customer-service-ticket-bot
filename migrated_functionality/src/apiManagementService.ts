/**
 * IZA OS API Management Service
 * Enterprise-grade API management with JWT tokens, OAuth2, and automated integration
 */

import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_MANAGEMENT_URL || 'http://localhost:8000';

export interface APIKey {
  id: string;
  name: string;
  provider: string;
  masked_key: string;
  environment: string;
  status: string;
  permissions: string[];
  usage: number;
  last_used?: string;
  created_at: string;
}

export interface JWTToken {
  id: string;
  name: string;
  issuer: string;
  audience: string;
  algorithm: string;
  masked_secret: string;
  expires_at: string;
  status: string;
  permissions: string[];
  usage: number;
  last_used?: string;
  auto_refresh: boolean;
}

export interface OAuth2Config {
  id: string;
  name: string;
  provider: string;
  client_id: string;
  masked_client_secret: string;
  authorization_url: string;
  token_url: string;
  scope: string[];
  redirect_uri: string;
  grant_type: string;
  status: string;
  access_token?: string;
  expires_in?: number;
  last_refresh?: string;
}

export interface DiscoveredAPI {
  id: string;
  name: string;
  url: string;
  method: string;
  category: string;
  status: string;
  source: string;
  authentication?: string;
  parameters?: Record<string, any>;
  confidence: number;
  discovered_at: string;
  tested_at?: string;
  integrated_at?: string;
}

export interface AIAgent {
  id: string;
  name: string;
  role: string;
  status: string;
  capabilities: string[];
  current_task?: string;
  progress?: number;
  last_activity: string;
  discovered_apis: number;
  integrated_apis: number;
  success_rate: number;
}

export interface BrowserTask {
  id: string;
  name: string;
  description: string;
  type: string;
  status: string;
  assigned_agent?: string;
  progress: number;
  created_at: string;
  completed_at?: string;
  target_url?: string;
  expected_outcome?: string;
}

export interface CreateAPIKeyRequest {
  name: string;
  provider: string;
  key: string;
  environment?: string;
  permissions?: string[];
  auto_refresh?: boolean;
}

export interface CreateJWTTokenRequest {
  name: string;
  issuer: string;
  audience: string;
  algorithm?: string;
  permissions?: string[];
  expires_hours?: number;
  auto_refresh?: boolean;
}

export interface CreateOAuth2ConfigRequest {
  name: string;
  provider: string;
  client_id: string;
  client_secret: string;
  authorization_url: string;
  token_url: string;
  scope: string[];
  redirect_uri: string;
  grant_type?: string;
}

class APIManagementService {
  private baseURL: string;
  private authToken: string | null = null;

  constructor() {
    this.baseURL = API_BASE_URL;
    this.loadAuthToken();
  }

  private loadAuthToken() {
    // Load JWT token from localStorage or generate a demo token
    const token = localStorage.getItem('iza_os_jwt_token');
    if (token) {
      this.authToken = token;
    } else {
      // Generate a demo token for development
      this.authToken = this.generateDemoToken();
      localStorage.setItem('iza_os_jwt_token', this.authToken);
    }
  }

  private generateDemoToken(): string {
    // This would normally be generated by the backend
    // For demo purposes, we'll use a simple base64 encoded token
    const payload = {
      sub: 'demo_user',
      name: 'IZA OS Demo User',
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours
    };
    return btoa(JSON.stringify(payload));
  }

  private getHeaders() {
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.authToken}`
    };
  }

  // API Key Management
  async createAPIKey(request: CreateAPIKeyRequest): Promise<APIKey> {
    try {
      const response = await axios.post(`${this.baseURL}/api/keys`, request, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error creating API key:', error);
      throw new Error('Failed to create API key');
    }
  }

  async listAPIKeys(): Promise<APIKey[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/keys`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing API keys:', error);
      throw new Error('Failed to list API keys');
    }
  }

  async getAPIKey(keyId: string): Promise<APIKey> {
    try {
      const response = await axios.get(`${this.baseURL}/api/keys/${keyId}`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error getting API key:', error);
      throw new Error('Failed to get API key');
    }
  }

  async updateAPIKey(keyId: string, request: CreateAPIKeyRequest): Promise<void> {
    try {
      await axios.put(`${this.baseURL}/api/keys/${keyId}`, request, {
        headers: this.getHeaders()
      });
    } catch (error) {
      console.error('Error updating API key:', error);
      throw new Error('Failed to update API key');
    }
  }

  async deleteAPIKey(keyId: string): Promise<void> {
    try {
      await axios.delete(`${this.baseURL}/api/keys/${keyId}`, {
        headers: this.getHeaders()
      });
    } catch (error) {
      console.error('Error deleting API key:', error);
      throw new Error('Failed to delete API key');
    }
  }

  // JWT Token Management
  async createJWTToken(request: CreateJWTTokenRequest): Promise<JWTToken> {
    try {
      const response = await axios.post(`${this.baseURL}/api/jwt-tokens`, request, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error creating JWT token:', error);
      throw new Error('Failed to create JWT token');
    }
  }

  async listJWTTokens(): Promise<JWTToken[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/jwt-tokens`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing JWT tokens:', error);
      throw new Error('Failed to list JWT tokens');
    }
  }

  async refreshJWTToken(tokenId: string): Promise<void> {
    try {
      await axios.post(`${this.baseURL}/api/jwt-tokens/${tokenId}/refresh`, {}, {
        headers: this.getHeaders()
      });
    } catch (error) {
      console.error('Error refreshing JWT token:', error);
      throw new Error('Failed to refresh JWT token');
    }
  }

  // OAuth2 Management
  async createOAuth2Config(request: CreateOAuth2ConfigRequest): Promise<OAuth2Config> {
    try {
      const response = await axios.post(`${this.baseURL}/api/oauth2-configs`, request, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error creating OAuth2 config:', error);
      throw new Error('Failed to create OAuth2 config');
    }
  }

  async listOAuth2Configs(): Promise<OAuth2Config[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/oauth2-configs`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing OAuth2 configs:', error);
      throw new Error('Failed to list OAuth2 configs');
    }
  }

  // API Discovery
  async startAPIDiscovery(): Promise<{ message: string; discovered_count: number }> {
    try {
      const response = await axios.post(`${this.baseURL}/api/discovery/start`, {}, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error starting API discovery:', error);
      throw new Error('Failed to start API discovery');
    }
  }

  async listDiscoveredAPIs(): Promise<DiscoveredAPI[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/discovery/apis`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing discovered APIs:', error);
      throw new Error('Failed to list discovered APIs');
    }
  }

  // AI Agent Management
  async createAIAgent(agentData: Partial<AIAgent>): Promise<{ message: string; agent_id: string }> {
    try {
      const response = await axios.post(`${this.baseURL}/api/agents`, agentData, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error creating AI agent:', error);
      throw new Error('Failed to create AI agent');
    }
  }

  async listAIAgents(): Promise<AIAgent[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/agents`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing AI agents:', error);
      throw new Error('Failed to list AI agents');
    }
  }

  async deployAIAgent(agentId: string, task: string): Promise<{ message: string; task: string }> {
    try {
      const response = await axios.post(`${this.baseURL}/api/agents/${agentId}/deploy`, 
        { task }, 
        { headers: this.getHeaders() }
      );
      return response.data;
    } catch (error) {
      console.error('Error deploying AI agent:', error);
      throw new Error('Failed to deploy AI agent');
    }
  }

  // Browser Automation
  async createBrowserTask(taskData: Partial<BrowserTask>): Promise<{ message: string; task_id: string }> {
    try {
      const response = await axios.post(`${this.baseURL}/api/browser-tasks`, taskData, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error creating browser task:', error);
      throw new Error('Failed to create browser task');
    }
  }

  async listBrowserTasks(): Promise<BrowserTask[]> {
    try {
      const response = await axios.get(`${this.baseURL}/api/browser-tasks`, {
        headers: this.getHeaders()
      });
      return response.data;
    } catch (error) {
      console.error('Error listing browser tasks:', error);
      throw new Error('Failed to list browser tasks');
    }
  }

  // Health Check
  async getHealthStatus(): Promise<{
    status: string;
    ecosystem: string;
    architecture: string;
    timestamp: string;
    services: Record<string, number>;
  }> {
    try {
      const response = await axios.get(`${this.baseURL}/health`);
      return response.data;
    } catch (error) {
      console.error('Error getting health status:', error);
      throw new Error('Failed to get health status');
    }
  }

  // Utility Methods
  async testAPIConnection(): Promise<boolean> {
    try {
      await this.getHealthStatus();
      return true;
    } catch (error) {
      return false;
    }
  }

  async getSystemMetrics(): Promise<{
    total_api_keys: number;
    total_jwt_tokens: number;
    total_oauth_configs: number;
    total_discovered_apis: number;
    total_ai_agents: number;
    total_browser_tasks: number;
  }> {
    try {
      const [apiKeys, jwtTokens, oauthConfigs, discoveredAPIs, aiAgents, browserTasks] = await Promise.all([
        this.listAPIKeys(),
        this.listJWTTokens(),
        this.listOAuth2Configs(),
        this.listDiscoveredAPIs(),
        this.listAIAgents(),
        this.listBrowserTasks()
      ]);

      return {
        total_api_keys: apiKeys.length,
        total_jwt_tokens: jwtTokens.length,
        total_oauth_configs: oauthConfigs.length,
        total_discovered_apis: discoveredAPIs.length,
        total_ai_agents: aiAgents.length,
        total_browser_tasks: browserTasks.length
      };
    } catch (error) {
      console.error('Error getting system metrics:', error);
      throw new Error('Failed to get system metrics');
    }
  }
}

export const apiManagementService = new APIManagementService();
export default apiManagementService;
